=================================================================================
Note 1
=================================================================================

def register(request):
    if request.method == 'POST':
        form = UserCreationForm(request.POST)
        if form.is_valid():
            username = form.cleaned_data.get('username')
            messages.success(request, f'Account created for {username}!')
            return redirect('blog-home')
    else:
        form = UserCreationForm()
    return render(request, 'users/register.html', {'form': form})

------------------------------------------
if, else explanation
------------------------------------------
When we access the register/ path, there are two possible scenarios. First scenario, we accessed it via 
a straight up GET request, which activates the else condition. Second scenario, we just submitted the form 
on the page, which effectively triggers a POST request to that URL (the register/ path). 

--------------------------------------------------
form = UserCreationForm(request.POST) explanation
--------------------------------------------------
Now here, we are assign the form variable to the data that the user has filled, which is stored in request.POST 
by Django. If there was any invalidity, like 'username already exists' or 'passwords do not mach', then we do not 
enter the nested if statement. Instead, we leave the if else statement and hit the last line of the function which 
is return render(request, 'users/register.html', {'form': form}). Now the form variable, which we assigned to the 
data which the user has filled gets assigned to the 'form' context and passed into the template and rendered as 
HTML. This is the reason why the user still sees the invalid username that he chose (as if it was saved) when he 
is shown the form page again to resend it with the necessary corrections. This does not apply to the password though 
and I think that is Django default behavior; I am guessing because you shouldn't see the password anyways.

On the other hand, if the form was valid and no issues were present, we enter the nested if statement. Cleaned_data 
is a Python dictionary which includes key-value pairs of the data that the user has submitted, allowing us to retrieve 
that info within the Python code. We then assign a success message and redirect the user to blog-home, which is the name 
we assigned to the blog/ url in ./blogs/urls.py

=================================================================================
Note 2
=================================================================================
@login_required
this is a decorator. A decorator adds functionality to a function of ours. In this case, the decorator's job is to 
ensure that when a visitor attempts to access the profile url, he must be logged in first. Otherwise, 

So, one thing that's nice about it is that we can see it works when we try to visit /profile but it changes the url 
to localhost:8000/accounts/login/?next=/profile/ first. That's nice but the thing is, we do not have an application 
called accounts, instead login/ is a direct URLpath and it lies within the users application. So to simply override 
this, we just add the setting LOGIN_URL = 'login' in django_project/settings.py (where 'login' is the name of the 
URLpattern that we assigned to /login).


=================================================================================
Note 3
=================================================================================

u_form = UserUpdateForm(instance=request.user) can be written as u_form = UserUpdateForm() but setting the instance 
equal to the model we want populates the fields with the user's current data. This works because these forms are 
ModelForms and they are expected to be working on a specific model object. Since we designed UserUpdateForm to inherit 
from forms.ModelForm and we set model = User, the UserUpdateForm fields get filled with the current user data.


=================================================================================
Note 4
=================================================================================

Since we are working with an image, some of the request data would be a file (the image file) as well so that has to 
be explicilty included